# Build examples with Platformio
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# https://docs.platformio.org/en/latest/integration/ci/github-actions.html

name: PlatformIO CI

on:
  workflow_dispatch:      # Manual start
  push:
    #branches: [ main, feat ]
    paths:
    - '**.cpp'
    - '**.hpp'
    - '**.h'
    - '**.c'
    - '**.ini'
    - '**.yml'
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    #strategy:
    #  matrix:
    #    example:
    #      - "examples/asyncserver-flashz"
    #      - "examples/httpserver-flashz"

    steps:
    - uses: actions/checkout@v5
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Set up Python 3.x
      uses: actions/setup-python@v6
      with:
        python-version: '3.x'
    - name: Install Platformio
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
        #pio update
    - name: Prepare examples for local build
      run: |
        pwd
        #ls -l
        mkdir ~/wrk
        mv examples/asyncserver-flashz ~/wrk/
        mv examples/httpserver-flashz ~/wrk/
        mkdir -p ~/wrk/asyncserver-flashz/lib/esp32-flashz ~/wrk/httpserver-flashz/lib/esp32-flashz
        cp -r ./src ~/wrk/asyncserver-flashz/lib/esp32-flashz
        cp -r ./src ~/wrk/httpserver-flashz/lib/esp32-flashz
        cp library.json ~/wrk/asyncserver-flashz/lib/esp32-flashz/
        cp library.json ~/wrk/httpserver-flashz/lib/esp32-flashz/
        ls -l ~/wrk/
        #cd ${{ matrix.example }} && platformio run -e flashz -e flashz_debug
        #pio ci -c ${{ matrix.example }}/platformio.ini
    - name: Run Build for Async server
      #env: 
      #  PLATFORMIO_CI_SRC: ${{ matrix.example }}
      run: |
        cd ~/wrk/asyncserver-flashz
        platformio run -e esp32 -e esp32-s2 -e esp32c3
        cd ~/wrk/httpserver-flashz
        platformio run -e esp32 -e esp32-s2 -e esp32c3
        #cd ${{ matrix.example }} && platformio run -e flashz -e flashz_debug
        #pio ci -c ${{ matrix.example }}/platformio.ini
    - name: Run Build for HTTP Server
      #env: 
      #  PLATFORMIO_CI_SRC: ${{ matrix.example }}
      run: |
        cd ~/wrk/httpserver-flashz
        platformio run -e esp32 -e esp32-s2 -e esp32c3
