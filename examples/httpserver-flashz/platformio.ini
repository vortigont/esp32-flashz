[platformio]
default_envs = flashz

[env]
framework = arduino
platform = espressif32
board = wemos_d1_mini32
board_build.filesystem = littlefs
lib_ldf_mode = chain+
lib_deps =
    vortigont / esp32-flashz
build_flags =
    -D NO_GLOBAL_UPDATE
    -D BUILD_ENV=$PIOENV
monitor_speed = 115200
monitor_filters = esp32_exception_decoder
extra_scripts =
    post:post_flashz.py

[debug]
build_flags =
    -DCORE_DEBUG_LEVEL=5
    -DLOG_LOCAL_LEVEL=ESP_LOG_DEBUG

; default Arduino ESP32
[env:flashz]
extends = env
build_flags =
    ${env.build_flags}
    -DCORE_DEBUG_LEVEL=3
    -DLOG_LOCAL_LEVEL=ESP_LOG_INFO

; build lib with lot's of debug enabled
[env:flashz_debug]
extends = env
build_flags =
    ${env.build_flags}
    ${debug.build_flags}

; this target will compress and do OTA upload to specified URL
[env:flashz_ota]
extends = env
upload_protocol = custom
; replace url with address of your esp32 device
upload_port = http://192.168.1.25/update
; compress image before uploading
upload_flags = compress
build_flags =
    ${env.build_flags}
    -DCORE_DEBUG_LEVEL=3
    -DLOG_LOCAL_LEVEL=ESP_LOG_INFO


; envs below is needed only for CI test build, pls do not use it
[env:esp32]
extends = env:flashz
lib_deps =

build_flags =
    ${env.build_flags}
    ${debug.build_flags}

; ESP32-S2 platform (for CI testing)
[env:esp32-s2]
extends = env:esp32
board = featheresp32-s2

; ESP32-c3 risc-v platform (for CI testing)
[env:esp32c3]
extends = env:esp32
board = ttgo-t-oi-plus
